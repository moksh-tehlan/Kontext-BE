# =============================================================================
# COMMON CONFIGURATION (All Environments)
# =============================================================================
spring:
  application:
    name: Kontext
  
  # Database Configuration (Common)
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 2
      maximum-pool-size: 20
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      validation-timeout: 3000
      leak-detection-threshold: 60000
  
  # JPA Configuration (Common)
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
    open-in-view: false
  
  # Jackson Configuration (Common)
  jackson:
    default-property-inclusion: NON_NULL
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    time-zone: UTC

  
  # Thread Pool Configuration
  task:
    execution:
      pool:
        core-size: 2
        max-size: 20
        queue-capacity: 500
      thread-name-prefix: kontext-task-
    scheduling:
      pool:
        size: 2
      thread-name-prefix: kontext-scheduling-
  
  # Redis Configuration (Common)
  data:
    redis:
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        
  # AI Configuration (Common)
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:your-openai-api-key}
      chat:
        options:
          model: gpt-4o
          temperature: 0.7
          max-tokens: 2000
      embedding:
        options:
          model: text-embedding-3-small
    vectorstore:
      qdrant:
        host: ${QDRANT_HOST:localhost}
        port: ${QDRANT_GRPC_PORT:6334}
        use-tls: ${QDRANT_USE_TLS:false}
        api-key: ${QDRANT_API_KEY:}
        collection-name: ${QDRANT_COLLECTION_NAME:kontext_knowledge}
        initialize-schema: true
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: always
  # Default Profile
  profiles:
    active: dev
  
  # Tracing Configuration
  sleuth:
    zipkin:
      enabled: false
    sampler:
      probability: 0.0
      
# Micrometer Tracing Configuration (for Spring Boot 3+)
management:
  tracing:
    enabled: false
  zipkin:
    tracing:
      endpoint: ""
  
  # Spring Cloud AWS Configuration
  cloud:
    aws:
      region:
        static: ${AWS_REGION}
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      sqs:
        region: ${AWS_REGION}

# JWT Configuration (Common)
jwt:
  secret: ${JWT_SECRET}
  access-token-expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION_MS:900000}   # 15 minutes
  refresh-token-expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION_MS:604800000}  # 7 days

# Server Configuration (Common)
server:
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# AWS Configuration (Common)
aws:
  access-key-id: ${AWS_ACCESS_KEY_ID}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY}
  region: ${AWS_REGION}
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME}
  cloudfront:
    url: ${AWS_CLOUDFRONT_URL}
  sqs:
    process-queue-url: ${AWS_SQS_PROCESS_QUEUE_URL}
    processing-queue-url: ${AWS_SQS_PROCESSING_QUEUE_URL}

# Google OAuth2 Configuration (Common)
google:
  oauth2:
    client-id: ${GOOGLE_OAUTH2_CLIENT_ID}